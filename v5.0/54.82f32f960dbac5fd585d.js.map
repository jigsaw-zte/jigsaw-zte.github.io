{"version":3,"sources":["webpack:///./src/app/demo/mobile/tab/api/tabContent/tab-content.module.ngfactory.js.pre-build-optimizer.js","webpack:///./src/jigsaw/mobile-components/input/input.ts.pre-build-optimizer.js","webpack:///./src/jigsaw/mobile-components/input/input.ts"],"names":["__webpack_require__","r","__webpack_exports__","d","TabMobileContentModuleNgFactory","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_tab_content_module__WEBPACK_IMPORTED_MODULE_1__","_node_modules_angular_router_router_ngfactory__WEBPACK_IMPORTED_MODULE_2__","_tabContent_ngfactory__WEBPACK_IMPORTED_MODULE_3__","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_angular_router__WEBPACK_IMPORTED_MODULE_6__","_jigsaw_mobile_components_button_button__WEBPACK_IMPORTED_MODULE_7__","_jigsaw_mobile_components_input_input__WEBPACK_IMPORTED_MODULE_8__","_tabContent__WEBPACK_IMPORTED_MODULE_9__","_l","path","component","outlet","JigsawMobileInput","JigsawMobileInputModule","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_common_common__WEBPACK_IMPORTED_MODULE_2__","_common_core_utils_common_utils__WEBPACK_IMPORTED_MODULE_3__","_super","_render2","_elementRef","_this","call","this","clearable","disabled","valid","password","_focusEmitter","_blurEmitter","_propagateChange","_value","valueChange","_placeholder","_focused","blurOnClear","Object","defineProperty","prototype","get","enumerable","configurable","writeValue","value","isUndefined","toString","registerOnChange","fn","registerOnTouched","set","newValue","callLater","_setInputPaddingStyle","emit","txt","focus","_inputElement","nativeElement","select","_$clearValue","_$handleFocus","event","_$handleBlur","_$stopPropagation","preventDefault","stopPropagation","prefixIconWidth","querySelector","offsetWidth","endIconWidth","prefixIconPadding","_$inputPaddingStyle","padding-left","padding-right","ngAfterContentInit","setStyle"],"mappings":"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","file":"54.82f32f960dbac5fd585d.js","sourcesContent":["/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./tab-content.module\";\nimport * as i2 from \"../../../../../../../node_modules/@angular/router/router.ngfactory\";\nimport * as i3 from \"./tabContent.ngfactory\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"../../../../../../jigsaw/mobile-components/button/button\";\nimport * as i8 from \"../../../../../../jigsaw/mobile-components/input/input\";\nimport * as i9 from \"./tabContent\";\nvar TabMobileContentModuleNgFactory = i0.ɵcmf(i1.TabMobileContentModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ɵangular_packages_router_router_lNgFactory, i3.TabContentComponentNgFactory, i3.TabContentDefineNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i4.NgLocalization, i4.NgLocaleLocalization, [i0.LOCALE_ID, [2, i4.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i5.ɵangular_packages_forms_forms_o, i5.ɵangular_packages_forms_forms_o, []), i0.ɵmpd(1073742336, i6.RouterModule, i6.RouterModule, [[2, i6.ɵangular_packages_router_router_a], [2, i6.Router]]), i0.ɵmpd(1073742336, i4.CommonModule, i4.CommonModule, []), i0.ɵmpd(1073742336, i7.JigsawMobileButtonModule, i7.JigsawMobileButtonModule, []), i0.ɵmpd(1073742336, i5.ɵangular_packages_forms_forms_d, i5.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i5.FormsModule, i5.FormsModule, []), i0.ɵmpd(1073742336, i8.JigsawMobileInputModule, i8.JigsawMobileInputModule, []), i0.ɵmpd(1073742336, i1.TabMobileContentModule, i1.TabMobileContentModule, []), i0.ɵmpd(1024, i6.ROUTES, function () { return [[{ path: \"\", component: i9.TabContentComponent, outlet: \"tab-page\" }]]; }, [])]); });\nexport { TabMobileContentModuleNgFactory as TabMobileContentModuleNgFactory };\n","import * as tslib_1 from \"tslib\";\nimport { EventEmitter, ElementRef, AfterContentInit, Renderer2 } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { AbstractJigsawComponent } from \"../../common/common\";\nimport { CommonUtils } from \"../../common/core/utils/common-utils\";\n/**\n * 单行输入框组件，常常用于接收用户的文本输入。\n *\n * 支持前后置图标，且每个图标都可交互，[参考demo]($demo=input/icons)。\n *\n * 这是一个表单友好组件。\n *\n * $demo = input/full\n */\nvar JigsawMobileInput = /** @class */ (function (_super) {\n    tslib_1.__extends(JigsawMobileInput, _super);\n    function JigsawMobileInput(_render2, _elementRef) {\n        var _this = _super.call(this) || this;\n        _this._render2 = _render2;\n        _this._elementRef = _elementRef;\n        /**\n         * 在文本框里的文本非空时，是否显示快速清除按钮，默认为显示。用户单击了清除按钮时，文本框里的文本立即被清空。\n         *\n         * $demo = input/clearable\n         */\n        _this.clearable = true;\n        /**\n         * 设置按钮不可交互状态的开关，为true则不可交互，为false则可交互。\n         *\n         * $demo = input/disabled\n         */\n        _this.disabled = false;\n        /**\n         * 当用户输入非法时，组件给予样式上的提示，以提升易用性，常常和表单配合使用。\n         *\n         * $demo = input/valid\n         * $demo = form/template-driven\n         */\n        _this.valid = true;\n        /**\n         * 当用户设置类型为password时，输入内容隐藏为特殊字符。\n         *\n         * $demo = input/password\n         */\n        _this.password = false;\n        _this._focusEmitter = new EventEmitter();\n        _this._blurEmitter = new EventEmitter();\n        _this._propagateChange = function () {\n        };\n        _this._value = ''; //input表单值\n        /**\n         * 当文本框中的文本发生变化时，组件会发出此事件。\n         *\n         * $demo = input/value-change\n         */\n        _this.valueChange = new EventEmitter();\n        _this._placeholder = '';\n        _this._focused = false;\n        /**\n         * 在单击了清除文本按钮时，是否让文本失去焦点，默认为失去焦点。\n         * 一般来说，是否失去焦点关系不大，但是在一些特定场合，却有很大关系。`JigsawTable`的默认单元格编辑渲染就是`JigsawInput`组件，\n         * 按照`JigsawTable`的交互逻辑，单元格编辑器一旦失去焦点，就必须退回到单元格显示渲染器。\n         * 在这个情况下，用户单击了清除文本按钮时就不能让输入框失去焦点。参考[这个demo]($demo=table/update-column-define)的职位列\n         *\n         * $demo = table/update-column-define\n         */\n        _this.blurOnClear = true;\n        return _this;\n    }\n    Object.defineProperty(JigsawMobileInput.prototype, \"type\", {\n        get: function () {\n            return this.password ? \"password\" : \"text\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JigsawMobileInput.prototype.writeValue = function (value) {\n        if (CommonUtils.isUndefined(value)) {\n            return;\n        }\n        this._value = value.toString();\n    };\n    JigsawMobileInput.prototype.registerOnChange = function (fn) {\n        this._propagateChange = fn;\n    };\n    JigsawMobileInput.prototype.registerOnTouched = function (fn) {\n    };\n    Object.defineProperty(JigsawMobileInput.prototype, \"value\", {\n        /**\n         * 文本框中当前的文本\n         *\n         * $demo = input/valid\n         */\n        get: function () {\n            return this._value;\n        },\n        set: function (newValue) {\n            var _this = this;\n            if (CommonUtils.isUndefined(newValue) || this._value === newValue) {\n                return;\n            }\n            if (this.clearable && ((newValue != '' && this._value == '') || (newValue == '' && this._value != ''))) {\n                this.callLater(function () { return _this._setInputPaddingStyle(); });\n            }\n            this._value = newValue;\n            this.valueChange.emit(this._value);\n            this._propagateChange(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JigsawMobileInput.prototype, \"placeholder\", {\n        get: function () {\n            return this._placeholder;\n        },\n        /**\n         * 当文本框内无文本时，显示这些文本以提示用户如何输入。\n         *\n         * $demo = input/valid\n         */\n        set: function (txt) {\n            this._placeholder = txt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * 调用此方法可以通过编程方式使得文本获得焦点。\n     * 当确信用户需要在文本框中输入时，自动让文本框获得焦点可以提升体验。\n     *\n     * $demo = input/focus\n     */\n    JigsawMobileInput.prototype.focus = function () {\n        this._focused = true;\n        this._inputElement.nativeElement.focus();\n    };\n    /**\n     * 调用此方法可以通过编程方式选中文本框中的所有文本。\n     * 当确信用户需要修改文本框里的文本时，自动选中所有文本可以提升体验。\n     *\n     * $demo = input/select\n     */\n    JigsawMobileInput.prototype.select = function () {\n        this._inputElement.nativeElement.select();\n    };\n    /**\n     * @internal\n     */\n    JigsawMobileInput.prototype._$clearValue = function () {\n        this.value = '';\n        this.focus();\n    };\n    Object.defineProperty(JigsawMobileInput.prototype, \"focused\", {\n        /**\n         * 获取文本框是否有焦点\n         *\n         * $demo = input/focus\n         */\n        get: function () {\n            return this._focused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @internal\n     */\n    JigsawMobileInput.prototype._$handleFocus = function (event) {\n        this._focused = true;\n        this._focusEmitter.emit(event);\n    };\n    /**\n     * @internal\n     */\n    JigsawMobileInput.prototype._$handleBlur = function (event) {\n        var _this = this;\n        this._focused = false;\n        if (this.blurOnClear) {\n            this._blurEmitter.emit(event);\n        }\n        else {\n            this.callLater(function () {\n                if (!_this._focused) {\n                    _this._blurEmitter.emit(event);\n                }\n            }, 150);\n        }\n    };\n    /**\n     * @internal\n     */\n    JigsawMobileInput.prototype._$stopPropagation = function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n    /**\n     * 动态计算 input的padding-left 和padding-right (不确定图标的个数, 好空出对应的位置.)\n     * 当前计算方法根据图标的个数计算, 默认图标大小为12px , dom大小获取的不准确.\n     *\n     */\n    JigsawMobileInput.prototype._setInputPaddingStyle = function () {\n        var prefixIconWidth = this._elementRef.nativeElement.querySelector(\".jigsaw-input-icon-front\").offsetWidth;\n        var endIconWidth = this._elementRef.nativeElement.querySelector(\".jigsaw-input-icon-end\").offsetWidth;\n        var prefixIconPadding = prefixIconWidth + 10;\n        if (prefixIconWidth !== 0) {\n            prefixIconPadding = prefixIconPadding + 8;\n        }\n        var endPadding = endIconWidth + 8;\n        this._$inputPaddingStyle = {\n            \"padding-left\": prefixIconPadding + \"px\",\n            \"padding-right\": endPadding + \"px\"\n        };\n    };\n    JigsawMobileInput.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.callLater(function () {\n            _this._render2.setStyle(_this._elementRef.nativeElement, 'opacity', 1);\n            _this._setInputPaddingStyle();\n        });\n    };\n    return JigsawMobileInput;\n}(AbstractJigsawComponent));\nexport { JigsawMobileInput };\nvar JigsawMobileInputModule = /** @class */ (function () {\n    function JigsawMobileInputModule() {\n    }\n    return JigsawMobileInputModule;\n}());\nexport { JigsawMobileInputModule };\n","import {\n    NgModule, Component, EventEmitter, Input, Output, ElementRef, ViewChild,\n    AfterContentInit, Renderer2, forwardRef\n} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {AbstractJigsawComponent, IJigsawFormControl} from \"../../common/common\";\nimport {CommonUtils} from \"../../common/core/utils/common-utils\";\n\n/**\n * 单行输入框组件，常常用于接收用户的文本输入。\n *\n * 支持前后置图标，且每个图标都可交互，[参考demo]($demo=input/icons)。\n *\n * 这是一个表单友好组件。\n *\n * $demo = input/full\n */\n@Component({\n    selector: 'jigsaw-mobile-input, jm-input',\n    templateUrl: 'input.html',\n    host: {\n        '[style.width]': 'width',\n        '[style.height]': 'height',\n        '(click)': '_$stopPropagation($event)',\n        '[class.jigsaw-input]': 'true',\n        '[class.jigsaw-input-error]': '!valid',\n        '[class.jigsaw-input-focused]': 'focused',\n        '[class.jigsaw-input-disabled]': 'disabled'\n    },\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => JigsawMobileInput), multi: true},\n    ]\n})\nexport class JigsawMobileInput extends AbstractJigsawComponent\n    implements IJigsawFormControl, ControlValueAccessor, AfterContentInit {\n\n    /**\n     * 在文本框里的文本非空时，是否显示快速清除按钮，默认为显示。用户单击了清除按钮时，文本框里的文本立即被清空。\n     *\n     * $demo = input/clearable\n     */\n    @Input() public clearable: boolean = true;\n\n    /**\n     * 设置按钮不可交互状态的开关，为true则不可交互，为false则可交互。\n     *\n     * $demo = input/disabled\n     */\n    @Input() public disabled: boolean = false;\n\n    /**\n     * 当用户输入非法时，组件给予样式上的提示，以提升易用性，常常和表单配合使用。\n     *\n     * $demo = input/valid\n     * $demo = form/template-driven\n     */\n    @Input() public valid: boolean = true;\n\n\n    /**\n     * 当用户设置类型为password时，输入内容隐藏为特殊字符。\n     *\n     * $demo = input/password\n     */\n    @Input() public password: boolean = false;\n\n    @Input()\n    public get type(): string {\n        return this.password ? \"password\" : \"text\";\n    }\n\n    @Output('focus')\n    private _focusEmitter: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n    @Output('blur')\n    private _blurEmitter: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n    constructor(protected _render2: Renderer2,\n                protected _elementRef: ElementRef) {\n        super();\n    }\n\n    private _propagateChange: any = () => {\n    };\n\n    public writeValue(value: any): void {\n        if (CommonUtils.isUndefined(value)) {\n            return;\n        }\n        this._value = value.toString();\n    }\n\n    public registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    public registerOnTouched(fn: any): void {\n    }\n\n    private _value: string = ''; //input表单值\n\n    /**\n     * 文本框中当前的文本\n     *\n     * $demo = input/valid\n     */\n    @Input()\n    public get value(): string {\n        return this._value;\n    }\n\n    public set value(newValue: string) {\n        if (CommonUtils.isUndefined(newValue) || this._value === newValue) {\n            return;\n        }\n\n        if (this.clearable && ((newValue != '' && this._value == '') || (newValue == '' && this._value != ''))) {\n            this.callLater(() => this._setInputPaddingStyle());\n        }\n        this._value = newValue;\n        this.valueChange.emit(this._value);\n        this._propagateChange(this._value);\n    }\n\n    /**\n     * 当文本框中的文本发生变化时，组件会发出此事件。\n     *\n     * $demo = input/value-change\n     */\n    @Output()\n    public valueChange: EventEmitter<string> = new EventEmitter<string>();\n\n    private _placeholder: string = '';\n\n    /**\n     * 当文本框内无文本时，显示这些文本以提示用户如何输入。\n     *\n     * $demo = input/valid\n     */\n    @Input()\n    public set placeholder(txt: string) {\n        this._placeholder = txt;\n    }\n\n    public get placeholder() {\n        return this._placeholder;\n    }\n\n\n    @ViewChild('input', {static: false})\n    private _inputElement: ElementRef;\n\n    /**\n     * 调用此方法可以通过编程方式使得文本获得焦点。\n     * 当确信用户需要在文本框中输入时，自动让文本框获得焦点可以提升体验。\n     *\n     * $demo = input/focus\n     */\n    public focus() {\n        this._focused = true;\n        this._inputElement.nativeElement.focus();\n    }\n\n    /**\n     * 调用此方法可以通过编程方式选中文本框中的所有文本。\n     * 当确信用户需要修改文本框里的文本时，自动选中所有文本可以提升体验。\n     *\n     * $demo = input/select\n     */\n    public select() {\n        this._inputElement.nativeElement.select();\n    }\n\n    /**\n     * @internal\n     */\n    public _$clearValue(): void {\n        this.value = '';\n        this.focus();\n    }\n\n    private _focused: boolean = false;\n\n    /**\n     * 获取文本框是否有焦点\n     *\n     * $demo = input/focus\n     */\n    public get focused(): boolean {\n        return this._focused;\n    }\n\n    /**\n     * @internal\n     */\n    public _$handleFocus(event: FocusEvent) {\n        this._focused = true;\n        this._focusEmitter.emit(event);\n    }\n\n    /**\n     * 在单击了清除文本按钮时，是否让文本失去焦点，默认为失去焦点。\n     * 一般来说，是否失去焦点关系不大，但是在一些特定场合，却有很大关系。`JigsawTable`的默认单元格编辑渲染就是`JigsawInput`组件，\n     * 按照`JigsawTable`的交互逻辑，单元格编辑器一旦失去焦点，就必须退回到单元格显示渲染器。\n     * 在这个情况下，用户单击了清除文本按钮时就不能让输入框失去焦点。参考[这个demo]($demo=table/update-column-define)的职位列\n     *\n     * $demo = table/update-column-define\n     */\n    @Input()\n    public blurOnClear: boolean = true;\n\n    /**\n     * @internal\n     */\n    public _$handleBlur(event: FocusEvent) {\n        this._focused = false;\n        if (this.blurOnClear) {\n            this._blurEmitter.emit(event);\n        } else {\n            this.callLater(() => {\n                if (!this._focused) {\n                    this._blurEmitter.emit(event);\n                }\n            }, 150);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    public _$stopPropagation(event) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @internal\n     */\n    public _$inputPaddingStyle: {};\n\n    /**\n     * 动态计算 input的padding-left 和padding-right (不确定图标的个数, 好空出对应的位置.)\n     * 当前计算方法根据图标的个数计算, 默认图标大小为12px , dom大小获取的不准确.\n     *\n     */\n    private _setInputPaddingStyle() {\n        let prefixIconWidth = this._elementRef.nativeElement.querySelector(\".jigsaw-input-icon-front\").offsetWidth;\n        let endIconWidth = this._elementRef.nativeElement.querySelector(\".jigsaw-input-icon-end\").offsetWidth;\n\n        let prefixIconPadding = prefixIconWidth + 10;\n        if (prefixIconWidth !== 0) {\n            prefixIconPadding = prefixIconPadding + 8;\n        }\n\n        let endPadding = endIconWidth + 8;\n\n        this._$inputPaddingStyle = {\n            \"padding-left\": prefixIconPadding + \"px\",\n            \"padding-right\": endPadding + \"px\"\n        };\n    }\n\n    ngAfterContentInit() {\n        this.callLater(() => {\n            this._render2.setStyle(this._elementRef.nativeElement, 'opacity', 1);\n            this._setInputPaddingStyle();\n        });\n    }\n}\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    declarations: [JigsawMobileInput],\n    exports: [JigsawMobileInput],\n})\nexport class JigsawMobileInputModule {\n\n}\n"],"sourceRoot":""}